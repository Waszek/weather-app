{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","search","setSearch","city","setCity","country","setCountry","date","setDate","temp","setTemp","weather","setWeather","high_temp","setHigh_temp","low_temp","setLow_temp","API","useEffect","console","log","results","query","setTimeout","fetch","then","response","json","updateData","data","cod","name","Date","toDateString","Math","round","main","temp_max","temp_min","sys","className","type","onKeyPress","e","key","value","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0PAyEeA,MAtEf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGiBJ,mBAAS,IAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIWN,mBAAS,IAJpB,mBAINO,EAJM,KAIAC,EAJA,OAKWR,mBAAS,IALpB,mBAKNS,EALM,KAKAC,EALA,OAMiBV,mBAAS,IAN1B,mBAMNW,EANM,KAMGC,EANH,OAOqBZ,mBAAS,IAP9B,mBAONa,EAPM,KAOKC,EAPL,OAQmBd,mBAAS,IAR5B,mBAQNe,EARM,KAQIC,EARJ,KAWLC,EACC,mCADDA,EAEC,2CAGPC,qBAAU,WACRC,QAAQC,IAAI,SACZC,EAAQ,cACP,IAWH,IAAMA,EAAU,SAACC,GACfC,WAAWC,MAAM,GAAD,OAAIP,EAAJ,qBAAwBK,EAAxB,+BAAoDL,IACnEQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAKG,GAAa,MAGfA,EAAa,SAACC,GAClB,GAAgB,MAAbA,EAAKC,IASN,OAAO,KARP1B,EAAQD,EAAO0B,EAAKE,MACpBvB,EAAQD,GAAO,IAAIyB,MAAOC,gBAC1BvB,EAAQD,EAAOyB,KAAKC,MAAMN,EAAKO,KAAK3B,OACpCG,EAAWD,EAAUkB,EAAKlB,QAAQ,GAAGyB,MACrCtB,EAAaD,EAAYqB,KAAKC,MAAMN,EAAKO,KAAKC,WAC9CrB,EAAYD,EAAWmB,KAAKC,MAAMN,EAAKO,KAAKE,WAC5ChC,EAAWD,EAAUwB,EAAKU,IAAIlC,UAQpC,OACE,yBAAKmC,UAAU,OACb,gCACE,2BAAOC,KAAK,OAAOC,WAhCvB,SAAwBC,GACT,UAAVA,EAAEC,MACHvB,EAAQpB,GACRC,EAAUD,EAAQ,MA6B6B4C,MAAO5C,EAAQ6C,SALxC,SAACH,GAAD,OAAOzC,EAAUD,EAAS0C,EAAEI,OAAOF,WAO1D,8BACC,yBAAKL,UAAU,QACX,yBAAKA,UAAU,QAAQrC,EAAvB,KAA+BE,GAC/B,yBAAKmC,UAAU,QAAQjC,GACvB,yBAAKiC,UAAU,QAAQ/B,EAAvB,UACA,yBAAK+B,UAAU,WAAW7B,GAC1B,yBAAK6B,UAAU,iBAAgB,8BAAOzB,EAAP,UAA0BF,EAA1B,aCtDvBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.f882332d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n    let [search, setSearch] = useState(\"\");\n    let [city, setCity] = useState(\"\");\n    let [country, setCountry] = useState(\"\");\n    let [date, setDate] = useState(\"\");\n    let [temp, setTemp] = useState(\"\");\n    let [weather, setWeather] = useState(\"\");\n    let [high_temp, setHigh_temp] = useState(\"\");\n    let [low_temp, setLow_temp] = useState(\"\");\n\n\n    const API = {\n      key: \"8ffbd7f64ff3a63da2914cd9fdc92da3\",\n      url: \"https://api.openweathermap.org/data/2.5/\",\n    }\n\n    useEffect(() => {\n      console.log(\"mount\")\n      results(\"Warszawa\");\n    }, []);\n      \n  \n\n    function handleKeyPress(e){\n      if(e.key === \"Enter\"){\n        results(search);\n        setSearch(search =\"\");\n      }\n    }\n    \n    const results = (query) => { \n      setTimeout(fetch(`${API.url}weather?q=${query}&units=metric&appid=${API.key}`)\n      .then(response => response.json())\n      .then(updateData), 1000);\n    }\n\n    const updateData = (data) => {\n      if(data.cod === 200){\n        setCity(city = data.name);\n        setDate(date = new Date().toDateString());\n        setTemp(temp = Math.round(data.main.temp));\n        setWeather(weather = data.weather[0].main);\n        setHigh_temp(high_temp = Math.round(data.main.temp_max));\n        setLow_temp(low_temp = Math.round(data.main.temp_min));\n        setCountry(country = data.sys.country);\n      } else {\n        return null;\n      }\n    }\n\n    const handleChangeInput = (e) => setSearch(search = e.target.value);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <input type=\"text\" onKeyPress={handleKeyPress} value={search} onChange={handleChangeInput}/>\n      </header>\n       <main>\n        <div className=\"info\">\n            <div className=\"city\">{city}, {country}</div>\n            <div className=\"date\">{date}</div>\n            <div className=\"temp\">{temp}&#8451;</div>\n            <div className=\"weather\">{weather}</div>\n            <div className=\"high-low-temp\"><span>{low_temp}&#176; / {high_temp}&#176;</span></div>\n        </div>\n       </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}